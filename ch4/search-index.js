var searchIndex = JSON.parse('{\
"os":{"doc":"The main module and entrypoint","t":"AFAAAAAOOFAAAAAARRCRRRCRRRRRFDLLLLFLLLLFFFCCCCCCCCCCACAAFAACCRRDDDDIRGRDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMMKLLLLLLLLLLLLLLLLLLLLLLLLDIGDDMKLLLLLLLMMKLLLMMLFFFLLLLFLLLKLLMMMLLLLLLLLLHHFFFNNDDDEDSSSSMLLLLMLLLLLMLLLLLLLLLLLLLLLLLLLLMLLFFFLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMLLFLFFLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLMSSSDDDSSSSSLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLFLLLLLLLLLLLLFFFCADLLLLMLLLLLRRRRRAAFRFFFFFDDDDMLLLLLLLFAMFFLFLLLLLLMLLLFLFLMMFLFLMMFAAMLLLLLLLLLDLLLLLMMMLLLLFNNNDEMLLLLLLLLLLLLMLLMLMMMLMLLLLLLRRFFFDAFFMMMFFMFFMFMDLLLLLMMMLMMLLLM","n":["board","clear_bss","config","console","lang_items","loader","mm","print","println","rust_main","sbi","sync","syscall","task","timer","trap","CLOCK_FREQ","MMIO","CLOCK_FREQ","KERNEL_HEAP_SIZE","KERNEL_STACK_SIZE","MEMORY_END","MMIO","PAGE_SIZE","PAGE_SIZE_BITS","TRAMPOLINE","TRAP_CONTEXT","USER_STACK_SIZE","kernel_stack_position","Stdout","borrow","borrow_mut","from","into","print","try_from","try_into","type_id","write_str","panic","get_app_data","get_num_app","FrameTracker","KERNEL_SPACE","KERNEL_SPACE","MapPermission","MemorySet","PageTableEntry","PhysAddr","PhysPageNum","VirtAddr","VirtPageNum","address","frame_alloc","frame_allocator","heap_allocator","init","memory_set","page_table","remap_test","translated_byte_buffer","PA_WIDTH_SV39","PPN_WIDTH_SV39","PhysAddr","PhysPageNum","SimpleRange","SimpleRangeIterator","StepByOne","VA_WIDTH_SV39","VPNRange","VPN_WIDTH_SV39","VirtAddr","VirtPageNum","aligned","aligned","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","current","end","eq","eq","eq","eq","floor","floor","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_bytes_array","get_end","get_mut","get_pte_array","get_start","indexes","into","into","into","into","into","into","into_iter","into_iter","l","l","new","new","next","page_offset","page_offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","step","step","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","FRAME_ALLOCATOR","FrameAllocator","FrameAllocatorImpl","FrameTracker","StackFrameAllocator","__private_field","alloc","alloc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","current","current","dealloc","dealloc","deref","drop","end","end","fmt","frame_alloc","frame_allocator_test","frame_dealloc","from","from","from","init","init_frame_allocator","into","into","into","new","new","new","ppn","recycled","recycled","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HEAP_ALLOCATOR","HEAP_SPACE","handle_alloc_error","heap_test","init_heap","Framed","Identical","KERNEL_SPACE","MapArea","MapPermission","MapType","MemorySet","R","U","W","X","__private_field","activate","all","append_to","append_to","areas","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","copy_data","data_frames","deref","difference","ebss","edata","ekernel","empty","eq","eq","erodata","etext","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_elf","from_iter","hash","insert","insert_framed_area","intersection","intersects","into","into","into","into","into","is_all","is_empty","map","map_one","map_perm","map_trampoline","map_type","new","new_bare","new_kernel","not","page_table","partial_cmp","push","remap_test","remove","sbss_with_stack","sdata","set","shrink_to","shrink_to","srodata","stext","strampoline","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","unmap_one","vpn_range","A","D","G","PTEFlags","PageTable","PageTableEntry","R","U","V","W","X","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","empty","empty","eq","executable","extend","find_pte","find_pte_create","flags","fmt","fmt","fmt","fmt","fmt","frames","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_token","hash","insert","intersection","intersects","into","into","into","is_all","is_empty","is_valid","map","new","new","not","partial_cmp","ppn","readable","remove","root_ppn","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","translated_byte_buffer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","unmap","writable","console_putchar","set_timer","shutdown","UPSafeCell","up","UPSafeCell","borrow","borrow_mut","exclusive_access","from","inner","into","new","try_from","try_into","type_id","SYSCALL_EXIT","SYSCALL_GET_TIME","SYSCALL_SBRK","SYSCALL_WRITE","SYSCALL_YIELD","fs","process","syscall","FD_STDOUT","sys_write","sys_exit","sys_get_time","sys_sbrk","sys_yield","TASK_MANAGER","TaskContext","TaskManager","TaskManagerInner","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","change_current_program_brk","change_program_brk","context","current_task","current_trap_cx","current_user_token","deref","exit_current_and_run_next","find_next_task","from","from","from","get_current_token","get_current_trap_cx","inner","into","into","into","mark_current_exited","mark_current_exited","mark_current_suspended","mark_current_suspended","num_app","ra","run_first_task","run_first_task","run_next_task","run_next_task","s","sp","suspend_current_and_run_next","switch","task","tasks","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","TaskContext","borrow","borrow_mut","from","goto_trap_return","into","ra","s","sp","try_from","try_into","type_id","zero_init","__switch","Exited","Ready","Running","TaskControlBlock","TaskStatus","base_size","borrow","borrow","borrow_mut","borrow_mut","change_program_brk","clone","clone_into","eq","from","from","get_trap_cx","get_user_token","heap_bottom","into","into","memory_set","new","program_brk","task_cx","task_status","to_owned","trap_cx_ppn","try_from","try_from","try_into","try_into","type_id","type_id","MSEC_PER_SEC","TICKS_PER_SEC","get_time","get_time_ms","set_next_trigger","TrapContext","context","enable_timer_interrupt","init","kernel_satp","kernel_sp","sepc","set_kernel_trap_entry","set_user_trap_entry","sstatus","trap_from_kernel","trap_handler","trap_handler","trap_return","x","TrapContext","app_init_context","borrow","borrow_mut","from","into","kernel_satp","kernel_sp","sepc","set_sp","sstatus","trap_handler","try_from","try_into","type_id","x"],"q":[[0,"os"],[16,"os::board"],[18,"os::config"],[29,"os::console"],[39,"os::lang_items"],[40,"os::loader"],[42,"os::mm"],[61,"os::mm::address"],[181,"os::mm::frame_allocator"],[230,"os::mm::heap_allocator"],[235,"os::mm::memory_set"],[367,"os::mm::page_table"],[465,"os::sbi"],[468,"os::sync"],[470,"os::sync::up"],[481,"os::syscall"],[489,"os::syscall::fs"],[491,"os::syscall::process"],[495,"os::task"],[549,"os::task::context"],[562,"os::task::switch"],[563,"os::task::task"],[597,"os::timer"],[602,"os::trap"],[617,"os::trap::context"],[633,"core::fmt"],[634,"core::result"],[635,"core::any"],[636,"core::fmt"],[637,"core::marker"],[638,"core::cmp"],[639,"core::cmp"],[640,"core::cmp"],[641,"core::alloc::layout"],[642,"alloc::sync"],[643,"core::iter::traits::collect"],[644,"core::hash"],[645,"alloc::vec"],[646,"core::cell"]],"d":["Constants used in rCore for qemu","clear BSS segment","Constants used in rCore","SBI console driver, for text output","The panic handler","Loading user applications into memory","Memory management implementation","print string macro","println string macro","the rust entry-point of os","SBI call wrappers","Synchronization and interior mutability primitives","Implementation of syscalls","Task management implementation","RISC-V timer-related functionality","Trap handling functionality","","","","","","","","","","","","","Return (bottom, top) of a kernel stack in kernel space.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","panic handler","get applications data","Get the total number of applications.","","","","","","","","","","","Implementation of physical and virtual address and page …","","Implementation of <code>FrameAllocator</code> which controls all the …","The global allocator","initiate heap allocator, frame allocator and kernel space","Implementation of <code>MapArea</code> and <code>MemorySet</code>.","Implementation of <code>PageTableEntry</code> and <code>PageTable</code>.","","","physical address","","Definitions","physical page number","a simple range structure for type T","iterator for the simple range structure","","","a simple range structure for virtual page number","","virtual address","virtual page number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","frame allocator instance through lazy_static!","","","manage a frame which has the same lifecycle as the tracker","an implementation for frame allocator","","","","","","","","","","","","","","","","","","","allocate a frame","a simple test for frame allocator","deallocate a frame","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","initiate the frame allocator using <code>ekernel</code> and <code>MEMORY_END</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","heap allocator instance","heap space ([u8; KERNEL_HEAP_SIZE])","panic when heap allocation error occurs","","initiate heap allocator","","","a memory set instance through lazy_static! managing kernel …","map area structure, controls a contiguous piece of virtual …","map permission corresponding to that in pte: <code>R W X U</code>","map type for memory set: identical or framed","memory set structure, controls virtual-memory space","","","","","","","Returns the set containing all flags.","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","data: start-aligned but maybe with shorter length assume …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Include sections in elf and trampoline and TrapContext and …","","","Inserts the specified flags in-place.","Assume that no conflicts.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","Mention that trampoline is not collected by areas.","","","","Without kernel stacks.","Returns the complement of this set of flags.","","","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","page table entry flags","page table structure","page table entry structure","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Temporarily used to get arguments from user space.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","translate a pointer to a mutable u8 Vec through page table","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","use sbi call to putchar in console (qemu uart handler)","use sbi call to set timer","use sbi call to shutdown the kernel","","Uniprocessor interior mutability primitives","Wrap a static data structure inside it so that we are able …","","","Exclusive access inner data in UPSafeCell. Panic if the …","Returns the argument unchanged.","inner data","Calls <code>U::from(self)</code>.","User is responsible to guarantee that inner struct is only …","","","","","","","","","File and filesystem-related syscalls","Process management syscalls","handle syscall exception with <code>syscall_id</code> and other …","","write buf of length <code>len</code>  to a file with <code>fd</code>","task exits and submit an exit code","get current time","change data segment size","current task gives up resources for other tasks","a <code>TaskManager</code> global instance through lazy_static!","task context structure containing some registers","The task manager, where all the tasks are managed.","The task manager inner in ‘UPSafeCell’","","","","","","","","Change the current ‘Running’ task’s program break","Change the current ‘Running’ task’s program break","Implementation of <code>TaskContext</code>","id of current <code>Running</code> task","Get the current ‘Running’ task’s trap contexts.","Get the current ‘Running’ task’s token.","","Exit the current ‘Running’ task and run the next task …","Find next task to run and return task id.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the current ‘Running’ task’s token.","Get the current ‘Running’ task’s trap contexts.","use inner value to get mutable access","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Change the status of current <code>Running</code> task into <code>Exited</code>.","Change the status of current <code>Running</code> task into <code>Exited</code>.","Change the status of current <code>Running</code> task into <code>Ready</code>.","Change the status of current <code>Running</code> task into <code>Ready</code>.","total number of tasks","return address ( e.g. __restore ) of __switch ASM function","Run the first task in task list.","Run the first task in task list.","Switch current <code>Running</code> task to the task we have found, or …","Switch current <code>Running</code> task to the task we have found, or …","callee saved registers:  s 0..11","kernel stack pointer of app","Suspend the current ‘Running’ task and run the next …","Rust wrapper around <code>__switch</code>.","Types related to task management","task list","","","","","","","","","","task context structure containing some registers","","","Returns the argument unchanged.","set Task Context{__restore ASM funciton: trap_return, sp: …","Calls <code>U::from(self)</code>.","return address ( e.g. __restore ) of __switch ASM function","callee saved registers:  s 0..11","kernel stack pointer of app","","","","init task context","Switch to the context of <code>next_task_cx_ptr</code>, saving the …","","","","task control block structure","task status: UnInit, Ready, Running, Exited","","","","","","change the location of the program break. return None if …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","get current time in microseconds","set the next timer interrupt","trap context structure containing sstatus, sepc and …","Implementation of <code>TrapContext</code>","enable timer interrupt in sie CSR","initialize CSR <code>stvec</code> as the entry of <code>__alltraps</code>","Addr of Page Table","kernel stack","CSR sepc","","","CSR sstatus      ","Unimplement: traps/interrupts/exceptions from kernel mode …","handle an interrupt, exception, or system call from user …","Addr of trap_handler function","set the new addr of __restore asm function in TRAMPOLINE …","general regs[0..31]","trap context structure containing sstatus, sepc and …","init app context","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Addr of Page Table","kernel stack","CSR sepc","set stack pointer to x_2 reg (sp)","CSR sstatus      ","Addr of trap_handler function","","","","general regs[0..31]"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,0,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,15,29,13,15,16,17,18,29,13,15,16,17,18,13,15,13,15,16,17,18,13,15,16,17,18,13,15,16,17,29,29,13,15,16,17,13,15,13,15,16,17,29,13,13,13,15,15,15,16,16,16,17,17,17,18,16,18,16,16,18,17,29,13,15,16,17,18,29,18,56,18,29,18,29,13,15,13,15,16,17,56,18,19,17,13,15,16,17,18,29,13,15,16,17,18,29,13,15,16,17,18,29,13,15,16,17,18,0,0,0,0,0,32,57,31,34,31,32,34,31,32,31,58,57,31,32,34,31,58,34,0,0,0,34,31,32,31,0,34,31,32,57,34,31,34,31,58,34,31,32,34,31,32,34,31,32,0,0,0,0,0,40,40,0,0,0,0,0,37,37,37,37,41,36,37,36,38,36,37,37,37,37,37,37,37,37,36,38,41,40,37,36,38,41,40,37,40,37,40,37,37,37,37,38,38,41,37,0,0,0,37,40,37,0,0,37,40,37,37,37,37,37,36,38,41,40,37,37,37,37,36,37,37,37,36,37,37,36,38,41,40,37,37,37,38,38,38,36,38,38,36,36,37,36,37,36,0,37,0,0,37,36,38,0,0,0,37,37,37,40,37,37,36,36,36,38,41,40,37,36,38,41,40,37,36,38,41,40,37,37,38,38,38,45,45,45,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,27,45,45,39,45,27,39,45,27,45,27,45,27,45,45,45,45,45,27,45,27,45,39,39,27,45,45,45,45,45,39,39,45,27,45,45,45,45,39,45,45,45,45,39,45,27,45,45,27,39,39,27,45,45,27,27,45,39,45,45,45,45,45,27,45,39,39,0,39,45,27,39,45,27,39,45,27,45,39,27,0,0,0,0,0,0,33,33,33,33,33,33,33,33,33,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,50,59,52,50,59,52,50,0,0,59,0,0,52,0,50,50,59,52,50,50,50,50,59,52,0,50,0,50,50,53,0,50,0,50,53,53,0,0,0,59,50,59,52,50,59,52,50,59,52,0,53,53,53,53,53,53,53,53,53,53,53,53,0,55,55,55,0,0,54,54,55,54,55,54,55,55,55,54,55,54,54,54,54,55,54,54,54,54,54,55,54,54,55,54,55,54,55,0,0,0,0,0,0,0,0,0,51,51,51,0,0,51,0,0,51,0,51,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51],"f":[0,[[],1],0,0,0,0,0,0,0,[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,[[1,[3,3]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[4,1],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[[7,8],9],[10,2],[3,[[12,[11]]]],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[13,14],[15,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,16],[15,17],[13,13],[15,15],[16,16],[17,17],[[[18,[-1]]],[[18,[-1]]],[19,20,21,22,23,24]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[13,13],25],[[15,15],25],[[16,16],25],[[17,17],25],0,0,[[13,13],14],[[15,15],14],[[16,16],14],[[17,17],14],[13,16],[15,17],[[13,26],9],[[15,26],9],[[16,26],9],[[17,26],9],[-1,-1,[]],[16,13],[3,13],[-1,-1,[]],[3,15],[17,15],[-1,-1,[]],[13,16],[3,16],[-1,-1,[]],[15,17],[-1,-1,[]],[3,17],[-1,-1,[]],[16,[[12,[11]]]],[[[18,[-1]]],-1,[19,20,21,22,23]],[16,-1,[]],[16,[[12,[27]]]],[[[18,[-1]]],-1,[19,20,21,22,23]],[17,[[28,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[18,[-1]]],[],[19,20,21,22,23]],0,0,[[-1,-1],[[29,[-1]]],[19,20,21,22,23]],[[-1,-1],[[18,[-1]]],[19,20,21,22,23]],[[[29,[-1]]],30,[19,20,21,22,23]],[13,3],[15,3],[[13,13],[[30,[25]]]],[[15,15],[[30,[25]]]],[[16,16],[[30,[25]]]],[[17,17],[[30,[25]]]],0,0,[-1,1,[]],[17,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,0,0,0,0,[-1,[[30,[16]]],[]],[31,[[30,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[-1,16],1,[]],[[31,16],1],[32,[[33,[31]]]],[34,1],0,0,[[34,26],9],[[],[[30,[34]]]],[[],1],[16,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[31,16,16],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],-1,[]],[16,34],[[],31],0,0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,[35,2],[[],1],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,[36,1],[[],37],[[36,15,15],14],[[38,39,17],1],0,[[37,37],37],[[37,37],1],[[37,37],37],[[37,37],1],[37,11],0,[[37,37],37],[[37,37],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[37,37],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[37,37],25],[37,37],[[37,37],14],[[38,39,[12,[11]]],1],0,[41,[[42,[[33,[36]]]]]],[[37,37],37],0,0,0,[[],37],[[40,40],14],[[37,37],14],0,0,[[37,-1],1,43],[[40,26],9],[[37,26],9],[[37,26],9],[[37,26],9],[[37,26],9],[[37,26],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,[[30,[37]]]],[11,37],[11,37],[[[12,[11]]],[[1,[36,3,3]]]],[-1,37,43],[[37,-1],1,44],[[37,37],1],[[36,15,15,37],1],[[37,37],37],[[37,37],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,14],[37,14],[[38,39],1],[[38,39,17],1],0,[36,1],0,[[15,15,40,37],38],[[],36],[[],36],[37,37],0,[[37,37],[[30,[25]]]],[[36,38,[30,[[12,[11]]]]],1],[[],1],[[37,37],1],0,0,[[37,37,14],1],[[36,15,15],14],[[38,39,17],1],0,0,0,[[37,37],37],[[37,37],1],[[37,37],37],[-1,-2,[],[]],[-1,-2,[],[]],[[37,37],1],[36,3],[[36,17],[[30,[27]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[37,37],37],[[38,39],1],[[38,39,17],1],0,0,0,0,0,0,0,0,0,0,0,0,[[],45],[[45,45],45],[[45,45],1],[[45,45],45],[[45,45],1],[45,11],0,0,[[45,45],45],[[45,45],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[45,45],[27,27],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[45,45],25],[45,45],[[45,45],14],[[45,45],45],[[],45],[[],27],[[45,45],14],[27,14],[[45,-1],1,43],[[39,17],[[30,[27]]]],[[39,17],[[30,[27]]]],[27,45],[[45,26],9],[[45,26],9],[[45,26],9],[[45,26],9],[[45,26],9],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,[[30,[45]]]],[11,45],[11,45],[-1,45,43],[3,39],[[45,-1],1,44],[[45,45],1],[[45,45],45],[[45,45],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[45,14],[45,14],[27,14],[[39,17,16,45],1],[[],39],[[16,45],27],[45,45],[[45,45],[[30,[25]]]],[27,16],[27,14],[[45,45],1],0,[[45,45,14],1],[[45,45],45],[[45,45],1],[[45,45],45],[-1,-2,[],[]],[-1,-2,[],[]],[[45,45],1],[39,3],[[39,17],[[30,[27]]]],[[3,11,3],[[46,[[12,[11]]]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[45,45],45],[[39,17],1],[27,14],[3,1],[3,1],[14,2],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1]]],[[47,[-1]]],[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,[[33,[-1]]],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,[[3,[28,[3]]],48],0,[[3,11,3],48],[49,2],[[],48],[49,48],[[],48],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[50,49],[[30,[3]]]],[49,[[30,[3]]]],0,0,[[],51],[[],3],[52,50],[[],1],[50,[[30,[3]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[50,3],[50,51],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[50,1],[[],1],[50,1],0,0,[[],1],[50,2],[[],1],[50,1],0,0,[[],1],0,0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[3,53],[-1,-2,[],[]],0,0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[[],53],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[54,49],[[30,[3]]]],[55,55],[[-1,-2],1,[],[]],[[55,55],14],[-1,-1,[]],[-1,-1,[]],[54,51],[54,3],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[12,[11]],3],54],0,0,0,[-1,-2,[],[]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],0,0,[[],3],[[],3],[[],1],0,0,[[],1],[[],1],0,0,0,[[],1],[[],1],0,[[],2],[[],2],0,[[],2],0,0,[[3,3,3,3,3],51],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,0,[[51,3],1],0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],0],"c":[],"p":[[15,"tuple"],[15,"never"],[15,"usize"],[3,"Arguments",633],[4,"Result",634],[3,"TypeId",635],[3,"Stdout",29],[15,"str"],[6,"Result",633],[3,"PanicInfo",636],[15,"u8"],[15,"slice"],[3,"PhysAddr",61],[15,"bool"],[3,"VirtAddr",61],[3,"PhysPageNum",61],[3,"VirtPageNum",61],[3,"SimpleRange",61],[8,"StepByOne",61],[8,"Copy",637],[8,"PartialEq",638],[8,"PartialOrd",638],[8,"Debug",633],[8,"Clone",639],[4,"Ordering",638],[3,"Formatter",633],[3,"PageTableEntry",367],[15,"array"],[3,"SimpleRangeIterator",61],[4,"Option",640],[3,"StackFrameAllocator",181],[3,"FRAME_ALLOCATOR",181],[3,"UPSafeCell",470],[3,"FrameTracker",181],[3,"Layout",641],[3,"MemorySet",235],[3,"MapPermission",235],[3,"MapArea",235],[3,"PageTable",367],[4,"MapType",235],[3,"KERNEL_SPACE",235],[3,"Arc",642],[8,"IntoIterator",643],[8,"Hasher",644],[3,"PTEFlags",367],[3,"Vec",645],[3,"RefMut",646],[15,"isize"],[15,"i32"],[3,"TaskManager",495],[3,"TrapContext",617],[3,"TASK_MANAGER",495],[3,"TaskContext",549],[3,"TaskControlBlock",563],[4,"TaskStatus",563],[6,"VPNRange",61],[8,"FrameAllocator",181],[6,"FrameAllocatorImpl",181],[3,"TaskManagerInner",495]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
